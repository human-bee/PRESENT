---
alwaysApply: false
---
# Building a Generative UI Component with Tambo

## 1. Import Tambo Hook

```typescript
import { useTamboComponentState } from "@tambo-ai/react";
```

## 2. Define Component State Type

```typescript
type YourComponentState = {
  selectedValues: string[];
};
```

## 3. Define Props Schema with Zod

```typescript
import { z } from "zod";

export const yourComponentSchema = z.object({
  title: z.string().describe("Title displayed above the component"),
  options: z.array(
    z.object({
      id: z.string().describe("Unique identifier"),
      label: z.string().describe("Display text"),
      value: z.string().describe("Value for selection"),
      description: z.string().optional().describe("Optional details"),
      // Add other properties as needed
    })
  ).describe("Array of items to display"),
});

export type YourComponentProps = z.infer<typeof yourComponentSchema>;
```

## 4. Initialize Tambo State

```typescript
const [state, setState] = useTamboComponentState<YourComponentState>(
  "your-component-id",
  { selectedValues: [] }
);
```

## 5. Implement State Updates

```typescript
const handleToggleSelection = (value: string) => {
  if (!state) return;
  
  const selectedValues = [...state.selectedValues];
  const index = selectedValues.indexOf(value);
  
  if (index > -1) {
    selectedValues.splice(index, 1);
  } else {
    selectedValues.push(value);
  }
  
  setState({ selectedValues });
};
```

## 6. Build UI with State-Based Rendering

```tsx
return (
  <div>
    {options?.map(item => (
      <div 
        key={item.id}
        className={state?.selectedValues.includes(item.value) ? "selected" : ""}
      >
        {/* Component content */}
      </div>
    ))}
  </div>
);
```
