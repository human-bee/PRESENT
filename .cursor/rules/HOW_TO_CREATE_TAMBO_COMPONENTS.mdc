---
description: 
globs: 
alwaysApply: false
---
# üöÄ The Tambo Component Creation Bible

> **"Stay present, let the canvas do the rest."**

## üßò Philosophy: Zero to Feature-Complete in One Flow

This is your production bible for creating Tambo components that are **born complete**. No half-measures. No "we'll add that later." Every component that ships is a fully-realized digital organism, alive on the canvas, connected to the world, and delighting users from moment one.

### The Prime Directives

1. **üéØ One Shot, One Kill**: Every component ships feature-complete
2. **‚ö° Thought-to-Canvas Pipeline**: Minimize latency between idea and implementation
3. **üåä Flow State Development**: Stay in the zone, let tools accelerate you
4. **üîó Connected by Default**: Backend, Canvas, LiveKit, MCP - all wired from the start
5. **‚ú® Delight is Non-Negotiable**: If it doesn't spark joy, it doesn't ship

## üèÉ‚Äç‚ôÇÔ∏è The Speed Run: Idea to Canvas in 5 Minutes

### Step 1: Manifest the Vision (30 seconds)
```bash
# Think: "I need a real-time dashboard for crypto prices"
# Type: /ui create a crypto price dashboard with live updates, price charts, and alerts

# The 21st-dev/magic tool instantly generates your UI foundation
```

### Step 2: Enhance with Intelligence (60 seconds)
```typescript
// Transform the generated UI into a Tambo-aware component
export const cryptoDashboardSchema = z.object({
  symbols: z.array(z.string()).describe("Crypto symbols to track (e.g., ['BTC', 'ETH'])"),
  refreshInterval: z.number().optional().describe("Update frequency in seconds"),
  showAlerts: z.boolean().optional().describe("Enable price alerts"),
  alertThresholds: z.object({
    increase: z.number().optional().describe("Alert when price increases by this %"),
    decrease: z.number().optional().describe("Alert when price decreases by this %"),
  }).optional(),
});

// The AI now understands your component's purpose and capabilities
```

### Step 3: Connect to Reality (90 seconds)
```typescript
export function CryptoDashboard({ symbols, refreshInterval = 5 }: CryptoDashboardProps) {
  // State management - reactive and persistent
  const [state, setState] = useTamboComponentState<DashboardState>(
    `crypto-dashboard-${symbols.join('-')}`,
    { prices: {}, alerts: [], isLive: true }
  );

  // Real API connection - no mocks!
  const { data: prices, error } = useWebSocket(
    `wss://crypto-api.example.com/stream?symbols=${symbols.join(',')}`
  );

  // Canvas awareness - component lives on the canvas
  useEffect(() => {
    window.dispatchEvent(
      new CustomEvent("tambo:showComponent", {
        detail: { 
          messageId: `crypto-${Date.now()}`,
          component: <CryptoDashboard {...props} />
        }
      })
    );
  }, []);

  // Voice control integration
  useDataChannel("transcription", (message) => {
    const command = parseVoiceCommand(message);
    if (command.type === "ADD_SYMBOL") {
      // Voice: "Add Bitcoin to the dashboard"
      updateSymbols([...symbols, command.symbol]);
    }
  });

  return <YourBeautifulDashboard />;
}
```

### Step 4: Register and Ship (30 seconds)
```typescript
// src/lib/tambo.ts
export const components: TamboComponent[] = [
  // ... existing components
  {
    name: "CryptoDashboard",
    description: "Real-time cryptocurrency price tracker with WebSocket updates, voice control, price alerts, and beautiful charts. Tracks multiple symbols simultaneously with configurable refresh rates.",
    component: CryptoDashboard,
    propsSchema: cryptoDashboardSchema,
  },
];
```

### Step 5: Refine in Real-Time (60 seconds)
```bash
# See it on canvas, want improvements?
# Type: /21 add candlestick charts and volume indicators

# Component updates while preserving all connections
```

## üèóÔ∏è The Architecture of Speed

### 1. Foundation Layer: Schema-First Design

```typescript
// üß† The Schema is Your Component's DNA
export const componentSchema = z.object({
  // Every prop tells a story - make it clear for AI
  dataSource: z.string().describe("API endpoint or WebSocket URL for real-time data"),
  visualStyle: z.enum(["minimal", "detailed", "compact"]).describe("How information is displayed"),
  interactionMode: z.enum(["view", "edit", "collaborate"]).describe("User interaction level"),
  
  // Optional props have sensible defaults
  updateFrequency: z.number().optional().default(1000).describe("Milliseconds between updates"),
  maxDataPoints: z.number().optional().default(100).describe("Maximum data points to display"),
});

// Pro tip: Rich descriptions = Better AI understanding = Faster development
```

### 2. State Layer: Reactive and Persistent

```typescript
// üîÑ State Management Pattern
type ComponentState = {
  // UI State
  isExpanded: boolean;
  activeView: "chart" | "table" | "stats";
  
  // Data State  
  data: DataPoint[];
  lastUpdate: Date;
  
  // Interaction State
  selectedItems: string[];
  userPreferences: Record<string, any>;
  
  // Canvas State
  canvasPosition: { x: number; y: number };
  canvasSize: { width: number; height: number };
};

// Initialize with meaningful defaults
const [state, setState] = useTamboComponentState<ComponentState>(
  uniqueComponentId,
  {
    isExpanded: false,
    activeView: "chart",
    data: [],
    lastUpdate: new Date(),
    selectedItems: [],
    userPreferences: {},
    canvasPosition: { x: 0, y: 0 },
    canvasSize: { width: 400, height: 300 },
  }
);

// Always check state exists before using
if (!state) return <LoadingState />;
```

### 3. Integration Layer: Connected Everything

```typescript
// üåê Backend Integration Pattern
function useRealTimeData(endpoint: string) {
  // WebSocket for streaming data
  const ws = useWebSocket(endpoint, {
    onMessage: (event) => processStreamingData(event.data),
    reconnect: true,
    reconnectInterval: 3000,
  });

  // REST API fallback
  const { data, error, mutate } = useSWR(
    ws.readyState !== WebSocket.OPEN ? endpoint : null,
    fetcher,
    { refreshInterval: 5000 }
  );

  return {
    data: ws.lastMessage || data,
    isConnected: ws.readyState === WebSocket.OPEN,
    error: error || ws.error,
    refresh: mutate,
  };
}

// üéôÔ∏è LiveKit Integration Pattern
function useVoiceCommands() {
  const room = useRoom();
  
  useDataChannel("commands", (message) => {
    const command = JSON.parse(new TextDecoder().decode(message.payload));
    
    switch (command.type) {
      case "UPDATE_VIEW":
        setState(prev => ({ ...prev, activeView: command.view }));
        break;
      case "FILTER_DATA":
        applyFilter(command.filter);
        break;
      case "EXPORT_DATA":
        exportToCanvas(state.data);
        break;
    }
  });
}

// üîß MCP Tool Integration Pattern
function useMCPTools() {
  const { tools } = useTamboRegistry();
  
  // Find relevant tools for your component
  const searchTool = tools.find(t => t.name === "search");
  const analyticsTool = tools.find(t => t.name === "analytics");
  
  // Use tools to enhance component capabilities
  const enhanceWithSearch = async (query: string) => {
    if (searchTool) {
      const results = await searchTool.execute({ query });
      updateComponentWithResults(results);
    }
  };
  
  return { enhanceWithSearch };
}
```

### 4. Canvas Layer: Living Components

```typescript
// üé® Canvas Integration Patterns

// Pattern 1: Auto-Canvas on Mount
useEffect(() => {
  window.dispatchEvent(
    new CustomEvent("tambo:showComponent", {
      detail: {
        messageId: componentId,
        component: <YourComponent {...props} />
      }
    })
  );
}, [componentId, props]);

// Pattern 2: Interactive Canvas Events
function CanvasAwareComponent() {
  // Listen for canvas interactions
  useEffect(() => {
    const handleCanvasEvent = (event: CustomEvent) => {
      if (event.detail.componentId === componentId) {
        switch (event.detail.action) {
          case "resize":
            setState(prev => ({
              ...prev,
              canvasSize: event.detail.size
            }));
            break;
          case "focus":
            setState(prev => ({
              ...prev,
              isActive: true
            }));
            break;
        }
      }
    };

    window.addEventListener("tambo:canvas:interaction", handleCanvasEvent);
    return () => window.removeEventListener("tambo:canvas:interaction", handleCanvasEvent);
  }, [componentId]);

  // Emit canvas updates
  const notifyCanvas = (action: string, data: any) => {
    window.dispatchEvent(
      new CustomEvent("tambo:componentUpdate", {
        detail: { componentId, action, data }
      })
    );
  };

  return (
    <div
      style={{
        width: state.canvasSize.width,
        height: state.canvasSize.height,
        minWidth: "200px",
        minHeight: "150px",
      }}
      className="relative"
    >
      <InteractiveContent onUpdate={notifyCanvas} />
    </div>
  );
}

// Pattern 3: Multi-Component Orchestration
function ComponentOrchestrator() {
  // Spawn related components
  const spawnRelatedComponent = (type: string, data: any) => {
    window.dispatchEvent(
      new CustomEvent("tambo:spawnComponent", {
        detail: {
          parentId: componentId,
          componentType: type,
          initialData: data,
          position: calculateRelativePosition(),
        }
      })
    );
  };

  return (
    <button onClick={() => spawnRelatedComponent("DetailView", currentData)}>
      Show Details in New Component
    </button>
  );
}
```

## üéØ Component Patterns by Use Case

### Pattern 1: Real-Time Data Visualizer
```typescript
// For: Dashboards, Analytics, Monitoring
export function RealTimeVisualizer({ dataEndpoint, chartType }: Props) {
  const { data, isConnected } = useRealTimeData(dataEndpoint);
  const [state, setState] = useTamboComponentState();
  
  // Auto-adapt to data changes
  useEffect(() => {
    if (data && data.length > state.maxDataPoints) {
      setState(prev => ({
        ...prev,
        data: data.slice(-state.maxDataPoints)
      }));
    }
  }, [data]);

  // Voice-controlled view switching
  useVoiceCommand("switch view", (viewType) => {
    setState(prev => ({ ...prev, chartType: viewType }));
  });

  return <ResponsiveChart data={state.data} type={chartType} />;
}
```

### Pattern 2: Interactive Form Builder
```typescript
// For: Data Entry, Configuration, Surveys
export function SmartForm({ schema, endpoint }: Props) {
  const [state, setState] = useTamboComponentState();
  const { validateWithAI } = useMCPTools();
  
  // AI-assisted validation
  const handleSubmit = async (formData: any) => {
    const validation = await validateWithAI(formData, schema);
    if (validation.isValid) {
      await submitToEndpoint(endpoint, formData);
      notifyCanvas("formSubmitted", formData);
    } else {
      showValidationErrors(validation.errors);
    }
  };

  return <DynamicForm schema={schema} onSubmit={handleSubmit} />;
}
```

### Pattern 3: Collaborative Workspace
```typescript
// For: Team Tools, Shared Canvases, Multi-user Experiences
export function CollaborativeSpace({ roomId, participants }: Props) {
  const room = useRoom();
  const [state, setState] = useTamboComponentState();
  
  // Real-time collaboration
  useDataChannel("collaboration", (message) => {
    const update = JSON.parse(message.payload);
    mergeCollaborativeState(update);
  });

  // Presence awareness
  const activeUsers = useParticipants().map(p => ({
    id: p.identity,
    name: p.name,
    isActive: p.isSpeaking,
    cursor: state.cursors[p.identity],
  }));

  return <SharedCanvas users={activeUsers} onUpdate={broadcastUpdate} />;
}
```

## üî• Advanced Techniques

### 1. Progressive Enhancement
```typescript
// Start simple, enhance as data arrives
export function ProgressiveComponent({ dataSource }: Props) {
  const [enhancementLevel, setEnhancementLevel] = useState(0);
  
  // Level 0: Basic skeleton
  if (!dataSource) return <Skeleton />;
  
  // Level 1: Static data display
  const { data } = useStaticData(dataSource);
  if (data && enhancementLevel === 0) {
    setEnhancementLevel(1);
    return <StaticDisplay data={data} />;
  }
  
  // Level 2: Real-time updates
  const { stream } = useStreamingData(dataSource);
  if (stream && enhancementLevel === 1) {
    setEnhancementLevel(2);
    return <LiveDisplay stream={stream} />;
  }
  
  // Level 3: Full interactivity
  const { controls } = useInteractiveControls();
  if (controls && enhancementLevel === 2) {
    setEnhancementLevel(3);
    return <InteractiveDisplay stream={stream} controls={controls} />;
  }
}
```

### 2. Self-Healing Components
```typescript
// Components that fix themselves
export function ResilientComponent({ primarySource, fallbackSource }: Props) {
  const [connectionState, setConnectionState] = useState("healthy");
  
  const { data, error } = useDataWithFallback(
    primarySource,
    fallbackSource,
    {
      onError: (err) => {
        setConnectionState("degraded");
        notifyCanvas("connectionIssue", { error: err });
      },
      onRecover: () => {
        setConnectionState("healthy");
        notifyCanvas("connectionRestored", {});
      },
    }
  );

  return (
    <div className={connectionState === "degraded" ? "border-yellow-400" : ""}>
      <StatusIndicator state={connectionState} />
      <Content data={data} />
    </div>
  );
}
```

### 3. AI-Powered Adaptivity
```typescript
// Components that learn and adapt
export function AdaptiveComponent({ userBehavior }: Props) {
  const [adaptations, setAdaptations] = useState({});
  const { analyzeUsage } = useMCPTools();
  
  // Learn from user interactions
  useEffect(() => {
    const analysis = analyzeUsage(userBehavior);
    if (analysis.suggestions) {
      setAdaptations(analysis.suggestions);
      applyAdaptations(analysis.suggestions);
    }
  }, [userBehavior]);

  return <SmartInterface adaptations={adaptations} />;
}
```

## üö® The Golden Rules

### Rule 1: No Skeleton Components
‚ùå **NEVER** ship a component that's "just UI"
‚úÖ **ALWAYS** connect to real data/functionality from day one

### Rule 2: Canvas-First Thinking
‚ùå **DON'T** build in isolation then "add canvas support"
‚úÖ **DO** design for canvas interaction from the start

### Rule 3: State is Sacred
‚ùå **AVOID** local state that doesn't persist
‚úÖ **EMBRACE** Tambo state management for everything important

### Rule 4: Fail Gracefully
‚ùå **NO** white screens of death
‚úÖ **YES** to fallbacks, skeletons, and helpful error states

### Rule 5: Delight by Default
‚ùå **BORING** is banned
‚úÖ **BEAUTIFUL** animations, transitions, and micro-interactions

## üé® The 21st-Dev Accelerator Workflow

### 1. Rapid Prototyping
```bash
# Instant UI generation
/ui create a kanban board with drag-drop, real-time sync, and team avatars

# See it, love it, enhance it
/21 add smooth animations and glass morphism effects

# Need branding?
/logo microsoft teams
/logo slack
/logo notion
```

### 2. Intelligent Refinement
```typescript
// After /ui generation, enhance with Tambo intelligence
export const enhancedComponent = withTamboEnhancements(
  GeneratedUIComponent,
  {
    schema: componentSchema,
    stateManagement: true,
    canvasIntegration: true,
    realtimeSync: true,
    voiceControl: true,
  }
);
```

### 3. Instant Testing
```typescript
// Components self-test on canvas
export function SelfTestingComponent() {
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      runComponentSelfTest({
        checkDataConnection: true,
        validateCanvasEvents: true,
        testStatePeristence: true,
        verifyVoiceCommands: true,
      });
    }
  }, []);
}
```

## üèÅ The Deployment Checklist

Before any component ships, it must pass the **COMPLETE** test:

- **C**onnected: Real data sources, no mocks
- **O**rchestrated: Plays well with other components
- **M**emorable: Delightful interactions users remember
- **P**ersistent: State survives refreshes and reconnects
- **L**ive: Real-time updates where it makes sense
- **E**xtensible: Easy to enhance without breaking
- **T**ested: Works in all scenarios
- **E**legant: Beautiful by default

## üåü Example: Building a Complete Trading Dashboard

```typescript
// 1. Schema Definition (30 seconds)
export const tradingDashboardSchema = z.object({
  symbols: z.array(z.string()).describe("Stock/crypto symbols to track"),
  dataProvider: z.string().describe("API endpoint for market data"),
  enableTrading: z.boolean().optional().describe("Allow live trading"),
  riskManagement: z.object({
    maxPositionSize: z.number().describe("Maximum position size in USD"),
    stopLossPercent: z.number().describe("Automatic stop loss percentage"),
  }).optional(),
});

// 2. Complete Implementation (3 minutes)
export function TradingDashboard({ symbols, dataProvider, enableTrading = false, riskManagement }: TradingDashboardProps) {
  // State Management
  const [state, setState] = useTamboComponentState<TradingState>(
    `trading-${symbols.join('-')}`,
    {
      positions: [],
      marketData: {},
      alerts: [],
      isAutoTrading: false,
    }
  );

  // Real Market Data Connection
  const { prices, volume, orderBook } = useMarketDataStream(dataProvider, symbols);
  
  // Trading Integration
  const { executeTrade, cancelOrder } = useTradingAPI({
    enabled: enableTrading,
    riskLimits: riskManagement,
  });

  // Voice Trading Commands
  useVoiceCommand("buy", async (params) => {
    if (params.symbol && params.amount) {
      const result = await executeTrade({
        symbol: params.symbol,
        side: "buy",
        amount: params.amount,
        riskCheck: true,
      });
      notifyCanvas("tradeExecuted", result);
    }
  });

  // AI Market Analysis
  const { analysis } = useAIMarketAnalysis(prices, {
    onSignal: (signal) => {
      if (state.isAutoTrading && signal.confidence > 0.8) {
        executeAutoTrade(signal);
      }
    },
  });

  // Canvas Integration
  useCanvasSync({
    onResize: (size) => setState(prev => ({ ...prev, displaySize: size })),
    onFocus: () => setState(prev => ({ ...prev, isActive: true })),
  });

  return (
    <div className="trading-dashboard bg-black text-green-400 font-mono">
      <MarketDataGrid prices={prices} volume={volume} />
      <TradingChart data={state.marketData} indicators={analysis.indicators} />
      <OrderBook data={orderBook} onOrderClick={executeTrade} />
      <PositionManager 
        positions={state.positions} 
        onClose={cancelOrder}
        riskLimits={riskManagement}
      />
      <VoiceCommandIndicator active={state.voiceControlActive} />
    </div>
  );
}

// 3. Registration (10 seconds)
// Add to tambo.ts and you're DONE!
```

## üöÄ Final Words: The Tambo Way

Building with Tambo isn't just about creating components‚Äîit's about crafting **living, breathing features** that exist harmoniously on the canvas. Every component is a complete thought, a full experience, a delight to use.

Remember:
- **Speed is a feature**: If it takes more than 5 minutes, you're overthinking
- **Connection is mandatory**: Backend, Canvas, Voice, MCP‚Äîwire it all
- **Delight is the default**: Every interaction should spark joy
- **The canvas is alive**: Your components are citizens of a living world

Now go forth and build. Stay present. Let the canvas do the rest. üßò‚ú®

---

*"The best component is not the one with no more features to add, but the one that ships complete and brings immediate value."*