/**
 * Root layout component for the Next.js application.
 * 
 * This file serves as the main layout wrapper for all pages in the application.
 * It includes:
 * - Font configuration using Geist Sans and Geist Mono from Google Fonts
 * - Global CSS imports including Tailwind CSS and tldraw styles
 * - Development-specific console warning suppression for performance violations
 * - HTML structure with proper lang attribute and hydration warning suppression
 * - Provider components wrapper for global state management
 * 
 * The layout is configured to handle both client and server-side rendering
 * while maintaining proper SEO metadata and accessibility standards.
 */


import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

// Component registry tests disabled to prevent infinite loops
// To manually test: import { testComponentRegistry } from '@/lib/test-component-registry'; 
// then call testComponentRegistry() in browser console
import "tldraw/tldraw.css";
import Providers from "@/components/providers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        {/* Suppress development warnings and performance violations */}
        {process.env.NODE_ENV === 'development' && (
          <script
            dangerouslySetInnerHTML={{
              __html: `
                // Suppress development warnings and performance violations
                if (typeof window !== 'undefined') {
                  const originalConsoleWarn = console.warn;
                  const originalConsoleError = console.error;
                  
                  console.warn = function(...args) {
                    const message = args.join(' ');
                    if (message.includes("'message' handler took") ||
                        message.includes("'setTimeout' handler took") ||
                        message.includes("Forced reflow while executing JavaScript") ||
                        message.includes("Violation") ||
                        message.includes("You have multiple instances of some tldraw libraries") ||
                        message.includes("This can lead to bugs and unexpected behavior") ||
                        message.includes("This usually means that your bundler is misconfigured")) {
                      return;
                    }
                    originalConsoleWarn.apply(console, args);
                  };
                  
                  console.error = function(...args) {
                    const message = args.join(' ');
                    if (message.includes("ValidationError") && 
                        message.includes("Expected a valid url") &&
                        message.includes("data:image")) {
                      console.log('Image drop validation error - handled by custom external content handlers');
                      return;
                    }
                    originalConsoleError.apply(console, args);
                  };
                }
              `,
            }}
          />
        )}
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
